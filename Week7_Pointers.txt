Week 7 Pointers และ Dynamic Memory Allocation
Pointers คือตัวแปรแบบหนึ่งในภาษา C โดยใช้เป็นตัวอ้างอิงตำแหน่งให้กับตัวแปรปกติ หรือ
มองอีกอย่างหนึ่ง เป็นตัวอ้างอิงตำแหน่งไปยังหน่วยความจำของระบบด้วย

2. Pointer Operators ในการใช้ pointer เรามีตัวดําเนินการอีก 2 ตัวถูกนิยามการใช้งานเพิ่มขึ้นมาจากตัวดําเนินการอื่นที่ เราเคยเรียนผ่านมาแล้ว
& เรียกว่า address operator ซึ่งเป็น unary operator ที่ต้องการเพียง 1 operand โดยที่ operand นั้นมักอยู่ในรูปของตัวแปร คือ & เป็น operator ที่ใช้หาค่าตําแหน่งในหน่วยความจําของ operand ดังที่เราเคยเห็น ผ่านตัวอย่างที่ใช้ในคําสั่ง
* เรียกว่า dereferencing operator หรือ indirection operator ซึ่งเป็น unary operator โดยที่ * ถูกใช้ในการเข้าถึงข้อมูลที่ถูกอ้างอิงโดยค่าตําแหน่งในหน่วยความจําที่มีค่าเป็น operand

2.1 ฟังก์ชัน scanf() ฟังก์ชัน scanf() เปรียบเทียบได้คล้ายกับฟังก์ชัน printf() เพียงแต่ทํางานในลักษณะตรงกันข้าม ตรงที่ printf() เป็นการแสดงผลออกไปที่ standard output (เช่น หน้าจอ) แต่ scanf() เป็นการรับข้อมูลเข้ามาในโปรแกรมผ่าน standard input (เช่น คีย์บอร์ด)
ตัวอย่าง 
int input;
scanf("%d", &input);

3. Pointers กับ Arrays 
อาเรย์สามารถใช้เก็บข้อมูลมากกว่า 1 จํานวนที่เป็นประเภทเดียวกันเข้าไว้ด้วยกันภายใต้ตัวแปรเดียวกัน ได้ เช่น a[i] อ้างอิงขึ้นข้อมูลตัวที่ i ในอาเรย์ a โดยข้อมูลตัวแรกในอาเรย์คือ a[0] ชื่อตัวแปรอาเรย์เป็นนิพจน์ที่บอกถึงค่า base address ของอาเรย์ คือ a จะให้ค่าตําแหน่งใน หน่วยความจําที่ใช้เก็บข้อมูลตัวแรกในอาเรย์ ดังนั้น a และ &a[0] จึงให้ค่าเท่ากัน

4. การจําลองการเรียกฟังก์ชันแบบ Call by Reference
โดยทั่วไป การส่งผ่านค่าพารามิเตอร์ไปยังฟังก์ชั่นสามารถทําได้ 2 ลักษณะ ซึ่งเรียกว่า call by value และ call by reference ภาษา C มีการส่งค่าพารามิเตอร์ไปยังฟังก์ชั่นผ่านการเรียกใช้ฟังก์ชั่นล้วนเป็น call by value แต่เรา สามารถใช้ pointer ช่วยจําลองการส่งผ่านค่าแบบ call by reference ได้

5. การใช้ const กับ pointers  ใน ANSI C Standard คีย์เวิร์ด const สามารถใช้ร่วมกับ pointer เพื่อแจ้งให้คอมไพเลอร์ทราบ ว่าค่าของตัวแปรนั้นไม่สามารถถูกแก้ไขได้

6. การใช้ pointer อ้างไปที่ฟังก์ชั่น (Pointers to Functions) เราสามารถใช้ตัวแปร pointer อ้างไปยังตําแหน่งในหน่วยความจําของฟังก์ชั่น ที่ต้องการได้  โดยปกติแล้ว ชื่อฟังก์ชั่นเป็นนิพจน์ที่ให้ค่า base address ของฟังก์ชั่น (ซึ่งมีลักษณะเดียวกับอาเรย์ที่ชื่ออาเรย์เป็นนิพจน์ที่ให้ค่า base address ของอาเรย์)

7. การจองหน่วยความจํา (Dynamic Memory Allocation)  เราจองหน่วยความจําผ่านการประกาศตัวแปร โดยที่การประกาศตัวแปรจะเป็นการจองและใช้ พื้นที่ในหน่วยความจําเพื่อใช้จัดเก็บค่าของตัวแปร หากเราไม่ได้งานพื้นที่นั้น เราสามารถ  free() ใช้คืนพื้นและเราสามารถใช้ฟังก์ชัน malloc() ใช้จองพื้นที่

8. Segmentation fault (core dumped) หากเราพยายามเข้าถึงหน่วยความจําที่เราไม่ได้จองไว้หรือหน่วยความจําที่นอกเหนือจากตัวแปรที่เรา ประกาศไว้ เรามีโอกาสที่จะถูกระบบปฏิบัติการจะหยุดการทํางานของโปรแกรมของเรา โดยในระบบ UNIX มักจะแสดงข้อความว่า Segmentation fault (core dumped) ออกมาบนหน้าจอให้ โปรแกรมเมอร์ได้รับรู้

